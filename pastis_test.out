[32m[11/29 15:36:56 segmentation]: [0mNamespace(cfg='configs/pastis_test.yaml', local_rank=0, opts=['TRAIN.IMS_PER_BATCH', '1', 'GPUS', '(0, )'])
[32m[11/29 15:36:56 segmentation]: [0mCKPT_FREQ: 5000
CUDNN:
  BENCHMARK: True
  DETERMINISTIC: False
  ENABLED: True
DATALOADER:
  NUM_WORKERS: 4
  SAMPLER_TRAIN: TrainingSampler
  TRAIN_SHUFFLE: True
DATASET:
  CACHE: False
  CLASS_MAPPING: None
  CROP_SIZE: (128, 128)
  DATASET: pastis_panoptic
  FOLDS: None
  IGNORE_STUFF_IN_OFFSET: True
  MAX_RESIZE_VALUE: -1
  MAX_SCALE: 2.0
  MEAN: (0.485, 0.456, 0.406)
  MEM16: None
  MIN_RESIZE_VALUE: -1
  MIN_SCALE: 0.5
  MIRROR: True
  MONODATE: None
  NORM: True
  NUM_CLASSES: 19
  REFER_DATE: 2018-09-01
  RESIZE_FACTOR: -1
  ROOT: /home/nazib/Data/PASTIS/
  SCALE_STEP_SIZE: 0.1
  SEMANTIC_ONLY: False
  SMALL_INSTANCE_AREA: 0
  SMALL_INSTANCE_WEIGHT: 1
  STD: (0.229, 0.224, 0.225)
  TARGET_TYPE: instance
  TEST_SPLIT: PASTIS_test
  TRAIN_SPLIT: PASTIS_train
DEBUG:
  DEBUG: True
  DEBUG_FREQ: 1000
  KEEP_INTERVAL: 1000
  OUTPUT_KEYS: ('semantic', 'center', 'offset')
  TARGET_KEYS: ('semantic', 'center', 'offset', 'semantic_weights', 'center_weights', 'offset_weights')
GPUS: (0,)
LOSS:
  CENTER:
    NAME: mse
    REDUCTION: none
    WEIGHT: 200.0
  FOREGROUND:
    IGNORE: 19
    MIN_KEPT: 100000
    NAME: cross_entropy
    REDUCTION: mean
    THRESHOLD: 0.7
    TOP_K_PERCENT: 1.0
    WEIGHT: 1.0
  OFFSET:
    NAME: l1
    REDUCTION: none
    WEIGHT: 0.0
  SEMANTIC:
    IGNORE: 255
    MIN_KEPT: 100000
    NAME: cross_entropy
    REDUCTION: mean
    THRESHOLD: 0.7
    TOP_K_PERCENT: 1.0
    WEIGHT: 2.5
MODEL:
  BACKBONE:
    DILATION: (False, False, False)
    META: resnet
    NAME: resnet50
    PRETRAINED: True
    WEIGHTS: 
  BN_MOMENTUM: 0.01
  DECODER:
    ATROUS_RATES: (3, 6, 9)
    CONV_KERNEL: 5
    CONV_PADDING: 2
    CONV_STACK: 1
    CONV_TYPE: depthwise_separable_conv
    DECODER_CHANNELS: 256
    FEATURE_KEY: res5
    IN_CHANNELS: 2048
  DEEPLABV3PLUS:
    LOW_LEVEL_CHANNELS: 256
    LOW_LEVEL_CHANNELS_PROJECT: 48
    LOW_LEVEL_KEY: res2
  META_ARCHITECTURE: panoptic_deeplab
  PANOPTIC_DEEPLAB:
    INSTANCE:
      ASPP_CHANNELS: 256
      CLASS_KEY: ('center', 'offset')
      DECODER_CHANNELS: 128
      ENABLE: True
      FOREGROUND_ARCH: v1
      FOREGROUND_SEG: False
      HEAD_CHANNELS: 32
      LOW_LEVEL_CHANNELS_PROJECT: (64, 32, 16)
      NUM_CLASSES: (1, 2)
    LOW_LEVEL_CHANNELS: (1024, 512, 256)
    LOW_LEVEL_CHANNELS_PROJECT: (128, 64, 32)
    LOW_LEVEL_KEY: ('res4', 'res3', 'res2')
  WEIGHTS: 
OUTPUT_DIR: ./output/pastis_panop_deeplab_r50
POST_PROCESSING:
  CENTER_THRESHOLD: 0.1
  NMS_KERNEL: 7
  STUFF_AREA: 2048
  TOP_K_INSTANCE: 200
PRINT_FREQ: 100
SOLVER:
  ADAM_BETAS: (0.9, 0.999)
  ADAM_EPS: 1e-08
  BASE_LR: 5e-05
  BIAS_LR_FACTOR: 1.0
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  Epochs: 5
  GAMMA: 0.1
  LR_SCHEDULER_NAME: WarmupPolyLR
  MOMENTUM: 0.9
  OPTIMIZER: adam
  POLY_LR_CONSTANT_ENDING: 0
  POLY_LR_POWER: 0.9
  STEPS: (30000,)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0
  WEIGHT_DECAY_BIAS: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  CROP_SIZE: (0, 0)
  DEBUG: False
  EVAL_FOREGROUND: False
  EVAL_INSTANCE: True
  EVAL_PANOPTIC: True
  FLIP_TEST: False
  FOREGROUND_FOLDER: foreground
  GPUS: (0,)
  INSTANCE_FOLDER: instance
  INSTANCE_SCORE_TYPE: semantic
  MODEL_FILE: 
  ORACLE_CENTER: False
  ORACLE_FOREGROUND: False
  ORACLE_OFFSET: False
  ORACLE_SEMANTIC: False
  PANOPTIC_FOLDER: panoptic
  SCALE_LIST: [1]
  SEMANTIC_FOLDER: semantic
  TEST_TIME_AUGMENTATION: False
TRAIN:
  IMS_PER_BATCH: 1
  MAX_ITER: 90000
  RESUME: False
WORKERS: 2
[32m[11/29 15:36:57 segmentation]: [0mModel:
PanopticDeepLab(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  (decoder): PanopticDeepLabDecoder(
    (semantic_decoder): SinglePanopticDeepLabDecoder(
      (aspp): ASPP(
        (convs): ModuleList(
          (0): Sequential(
            (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): ASPPConv(
            (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (2): ASPPConv(
            (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (3): ASPPConv(
            (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(9, 9), dilation=(9, 9), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (4): ASPPPooling(
            (aspp_pooling): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (2): ReLU()
            )
          )
        )
        (project): Sequential(
          (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.5, inplace=False)
        )
      )
      (project): ModuleList(
        (0): Sequential(
          (0): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): Sequential(
          (0): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (fuse): ModuleList(
        (0): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(384, 384, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=384, bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (3): ReLU()
          )
        )
        (1): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False)
              (1): BatchNorm2d(320, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Conv2d(320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (3): ReLU()
          )
        )
        (2): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False)
              (1): BatchNorm2d(288, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Conv2d(288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (3): ReLU()
          )
        )
      )
    )
    (semantic_head): SinglePanopticDeepLabHead(
      (classifier): ModuleDict(
        (semantic): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (2): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (3): ReLU()
            )
          )
          (1): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (instance_decoder): SinglePanopticDeepLabDecoder(
      (aspp): ASPP(
        (convs): ModuleList(
          (0): Sequential(
            (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): ASPPConv(
            (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (2): ASPPConv(
            (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (3): ASPPConv(
            (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(9, 9), dilation=(9, 9), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (4): ASPPPooling(
            (aspp_pooling): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (2): ReLU()
            )
          )
        )
        (project): Sequential(
          (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.5, inplace=False)
        )
      )
      (project): ModuleList(
        (0): Sequential(
          (0): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): Sequential(
          (0): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (fuse): ModuleList(
        (0): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False)
              (1): BatchNorm2d(320, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (3): ReLU()
          )
        )
        (1): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False)
              (1): BatchNorm2d(160, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (3): ReLU()
          )
        )
        (2): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=144, bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Conv2d(144, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            (3): ReLU()
          )
        )
      )
    )
    (instance_head): SinglePanopticDeepLabHead(
      (classifier): ModuleDict(
        (center): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (2): BatchNorm2d(32, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (3): ReLU()
            )
          )
          (1): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (offset): Sequential(
          (0): Sequential(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (2): BatchNorm2d(32, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              (3): ReLU()
            )
          )
          (1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (semantic_loss): RegularCE(
    (criterion): CrossEntropyLoss()
  )
  (center_loss): MSELoss()
  (offset_loss): L1Loss()
)
[32m[11/29 15:36:57 segmentation]: [0mRank of current process: 0. World size: 1
[32m[11/29 15:37:04 segmentation]: [0mTest model loaded from ./output/pastis_panop_deeplab_r50/final_state.pth
Start Testing Loop
Step [3799/3800], SQ 3800.0,  RQ 3218.0  , PQ 147.5
PBS Job 3283630.pbs
CPU time  : 15:43:26
Wall time : 15:47:12
Mem usage : 5985248kb
